//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;

public partial class real_estateEntities1 : DbContext
{
    public real_estateEntities1()
        : base("name=real_estateEntities1")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public DbSet<agent_info> agent_info { get; set; }
    public DbSet<category> categories { get; set; }
    public DbSet<company_info> company_info { get; set; }
    public DbSet<portal_users> portal_users { get; set; }
    public DbSet<property> properties { get; set; }
    public DbSet<properties_info> properties_info { get; set; }
    public DbSet<user> users { get; set; }
    public DbSet<V_AllProperties> V_AllProperties { get; set; }
    public DbSet<V_TopOneProperties> V_TopOneProperties { get; set; }
    public DbSet<VT_agent_info> VT_agent_info { get; set; }
    public DbSet<VT_Properties> VT_Properties { get; set; }
    public DbSet<VT_properties_info> VT_properties_info { get; set; }

    public virtual ObjectResult<SP_AllProperties_by_currency_Result> SP_AllProperties_by_currency(string currency)
    {
        var currencyParameter = currency != null ?
            new ObjectParameter("currency", currency) :
            new ObjectParameter("currency", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AllProperties_by_currency_Result>("SP_AllProperties_by_currency", currencyParameter);
    }

    public virtual ObjectResult<SP_Get_Properties_by_id_Result> SP_Get_Properties_by_id(string currency, Nullable<int> propertie_id)
    {
        var currencyParameter = currency != null ?
            new ObjectParameter("currency", currency) :
            new ObjectParameter("currency", typeof(string));

        var propertie_idParameter = propertie_id.HasValue ?
            new ObjectParameter("Propertie_id", propertie_id) :
            new ObjectParameter("Propertie_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_Properties_by_id_Result>("SP_Get_Properties_by_id", currencyParameter, propertie_idParameter);
    }

    public virtual int SP_search(string currency, string properties_type, string category_name, string city, Nullable<int> bedrooms, Nullable<int> bathrooms, Nullable<decimal> min_price, Nullable<decimal> max_price, Nullable<int> min_area, Nullable<int> max_area, string display_type)
    {
        var currencyParameter = currency != null ?
            new ObjectParameter("currency", currency) :
            new ObjectParameter("currency", typeof(string));

        var properties_typeParameter = properties_type != null ?
            new ObjectParameter("properties_type", properties_type) :
            new ObjectParameter("properties_type", typeof(string));

        var category_nameParameter = category_name != null ?
            new ObjectParameter("category_name", category_name) :
            new ObjectParameter("category_name", typeof(string));

        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));

        var bedroomsParameter = bedrooms.HasValue ?
            new ObjectParameter("Bedrooms", bedrooms) :
            new ObjectParameter("Bedrooms", typeof(int));

        var bathroomsParameter = bathrooms.HasValue ?
            new ObjectParameter("Bathrooms", bathrooms) :
            new ObjectParameter("Bathrooms", typeof(int));

        var min_priceParameter = min_price.HasValue ?
            new ObjectParameter("min_price", min_price) :
            new ObjectParameter("min_price", typeof(decimal));

        var max_priceParameter = max_price.HasValue ?
            new ObjectParameter("max_price", max_price) :
            new ObjectParameter("max_price", typeof(decimal));

        var min_areaParameter = min_area.HasValue ?
            new ObjectParameter("min_area", min_area) :
            new ObjectParameter("min_area", typeof(int));

        var max_areaParameter = max_area.HasValue ?
            new ObjectParameter("max_area", max_area) :
            new ObjectParameter("max_area", typeof(int));

        var display_typeParameter = display_type != null ?
            new ObjectParameter("Display_type", display_type) :
            new ObjectParameter("Display_type", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_search", currencyParameter, properties_typeParameter, category_nameParameter, cityParameter, bedroomsParameter, bathroomsParameter, min_priceParameter, max_priceParameter, min_areaParameter, max_areaParameter, display_typeParameter);
    }

    public virtual ObjectResult<SP_search_by_category_name_Result> SP_search_by_category_name(string currency, string category_name)
    {
        var currencyParameter = currency != null ?
            new ObjectParameter("currency", currency) :
            new ObjectParameter("currency", typeof(string));

        var category_nameParameter = category_name != null ?
            new ObjectParameter("category_name", category_name) :
            new ObjectParameter("category_name", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_search_by_category_name_Result>("SP_search_by_category_name", currencyParameter, category_nameParameter);
    }

    public virtual ObjectResult<SP_TopOneProperties_by_currency_Result> SP_TopOneProperties_by_currency(string currency)
    {
        var currencyParameter = currency != null ?
            new ObjectParameter("currency", currency) :
            new ObjectParameter("currency", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TopOneProperties_by_currency_Result>("SP_TopOneProperties_by_currency", currencyParameter);
    }
}
