//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 11/17/2023 5:11:40 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("RealEstateModel_mysql", "FK__propertie__agent__075714DC", "AgentInfo", RelationshipMultiplicity.One, typeof(RealEstateModel_mysql.AgentInfo), "Properties", RelationshipMultiplicity.Many, typeof(RealEstateModel_mysql.Property), true)]
[assembly: EdmRelationshipAttribute("RealEstateModel_mysql", "FK__propertie__categ__55F4C372", "Category", RelationshipMultiplicity.One, typeof(RealEstateModel_mysql.Category), "Properties", RelationshipMultiplicity.Many, typeof(RealEstateModel_mysql.Property), true)]
[assembly: EdmRelationshipAttribute("RealEstateModel_mysql", "FK__propertie__id_pr__5BAD9CC8", "Property", RelationshipMultiplicity.One, typeof(RealEstateModel_mysql.Property), "PropertiesInfos", RelationshipMultiplicity.Many, typeof(RealEstateModel_mysql.PropertiesInfo), true)]

#endregion

namespace RealEstateModel_mysql
{

    #region RealEstateEntities_mysql

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RealEstateEntities_mysql : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new RealEstateEntities_mysql object.
        /// </summary>
        public RealEstateEntities_mysql() :
                base(@"name=RealEstateEntitiesConnectionString", "RealEstateEntities_mysql")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new RealEstateEntities_mysql object using the connection string found in the 'RealEstateEntities_mysql' section of the application configuration file.
        /// </summary>
        public RealEstateEntities_mysql(string connectionString) :
                base(connectionString, "RealEstateEntities_mysql")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new RealEstateEntities_mysql object.
        /// </summary>
        public RealEstateEntities_mysql(EntityConnection connection) : base(connection, "RealEstateEntities_mysql")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }


        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AgentInfo> AgentInfos
        {
            get
            {
                if ((_AgentInfos == null))
                {
                    _AgentInfos = base.CreateObjectSet<AgentInfo>("AgentInfos");
                }
                return _AgentInfos;
            }
        }
        private ObjectSet<AgentInfo> _AgentInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Category> Categories
        {
            get
            {
                if ((_Categories == null))
                {
                    _Categories = base.CreateObjectSet<Category>("Categories");
                }
                return _Categories;
            }
        }
        private ObjectSet<Category> _Categories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyInfo> CompanyInfos
        {
            get
            {
                if ((_CompanyInfos == null))
                {
                    _CompanyInfos = base.CreateObjectSet<CompanyInfo>("CompanyInfos");
                }
                return _CompanyInfos;
            }
        }
        private ObjectSet<CompanyInfo> _CompanyInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PortalUser> PortalUsers
        {
            get
            {
                if ((_PortalUsers == null))
                {
                    _PortalUsers = base.CreateObjectSet<PortalUser>("PortalUsers");
                }
                return _PortalUsers;
            }
        }
        private ObjectSet<PortalUser> _PortalUsers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Property> Properties
        {
            get
            {
                if ((_Properties == null))
                {
                    _Properties = base.CreateObjectSet<Property>("Properties");
                }
                return _Properties;
            }
        }
        private ObjectSet<Property> _Properties;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PropertiesInfo> PropertiesInfos
        {
            get
            {
                if ((_PropertiesInfos == null))
                {
                    _PropertiesInfos = base.CreateObjectSet<PropertiesInfo>("PropertiesInfos");
                }
                return _PropertiesInfos;
            }
        }
        private ObjectSet<PropertiesInfo> _PropertiesInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VAllproperty> VAllproperties
        {
            get
            {
                if ((_VAllproperties == null))
                {
                    _VAllproperties = base.CreateObjectSet<VAllproperty>("VAllproperties");
                }
                return _VAllproperties;
            }
        }
        private ObjectSet<VAllproperty> _VAllproperties;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the AgentInfos EntitySet.
        /// </summary>
        public void AddToAgentInfos(AgentInfo agentInfo)
        {
            base.AddObject("AgentInfos", agentInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Categories EntitySet.
        /// </summary>
        public void AddToCategories(Category category)
        {
            base.AddObject("Categories", category);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyInfos EntitySet.
        /// </summary>
        public void AddToCompanyInfos(CompanyInfo companyInfo)
        {
            base.AddObject("CompanyInfos", companyInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the PortalUsers EntitySet.
        /// </summary>
        public void AddToPortalUsers(PortalUser portalUser)
        {
            base.AddObject("PortalUsers", portalUser);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Properties EntitySet.
        /// </summary>
        public void AddToProperties(Property property)
        {
            base.AddObject("Properties", property);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the PropertiesInfos EntitySet.
        /// </summary>
        public void AddToPropertiesInfos(PropertiesInfo propertiesInfo)
        {
            base.AddObject("PropertiesInfos", propertiesInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the VAllproperties EntitySet.
        /// </summary>
        public void AddToVAllproperties(VAllproperty vAllproperty)
        {
            base.AddObject("VAllproperties", vAllproperty);
        }

        #endregion

        #region Methods

    
        /// <summary>
        /// There are no comments for SPAllPropertiesByCurrency in the schema.
        /// </summary>
        public virtual ObjectResult<SPAllPropertiesByCurrencyResult> SPAllPropertiesByCurrency (string currency)
        {
            ObjectParameter currencyParameter;
            if (currency != null)
            {
                currencyParameter = new ObjectParameter("currency", currency);
            }
            else
            {
                currencyParameter = new ObjectParameter("currency", typeof(string));
            }
            return base.ExecuteFunction<SPAllPropertiesByCurrencyResult>("RealEstateEntities_mysql.SPAllPropertiesByCurrency", currencyParameter);
        }

    
        /// <summary>
        /// There are no comments for SPGetPropertiesById in the schema.
        /// </summary>
        public virtual ObjectResult<SPAllPropertiesByCurrencyResult> SPGetPropertiesById (int? Propertie_id, string currency)
        {
            ObjectParameter Propertie_idParameter;
            if (Propertie_id.HasValue)
            {
                Propertie_idParameter = new ObjectParameter("Propertie_id", Propertie_id);
            }
            else
            {
                Propertie_idParameter = new ObjectParameter("Propertie_id", typeof(int?));
            }
            ObjectParameter currencyParameter;
            if (currency != null)
            {
                currencyParameter = new ObjectParameter("currency", currency);
            }
            else
            {
                currencyParameter = new ObjectParameter("currency", typeof(string));
            }
            return base.ExecuteFunction<SPAllPropertiesByCurrencyResult>("RealEstateEntities_mysql.SPGetPropertiesById", Propertie_idParameter, currencyParameter);
        }

    
        /// <summary>
        /// There are no comments for SPSearch in the schema.
        /// </summary>
        public virtual void SPSearch (string p_currency, string p_properties_type, string p_category_name, string p_city, int? p_Bedrooms, int? p_Bathrooms, decimal? p_min_price, decimal? p_max_price, int? p_min_area, int? p_max_area, string p_Display_type)
        {
            bool needClose = false;
            if (this.Connection.State != System.Data.ConnectionState.Open) {
              this.Connection.Open();
              needClose = true;
            }

            try {
              using (EntityCommand command = new EntityCommand())
              {
                if (this.CommandTimeout.HasValue)
                  command.CommandTimeout = this.CommandTimeout.Value;
                command.CommandType = System.Data.CommandType.StoredProcedure;
                command.CommandText = @"RealEstateEntities_mysql.SPSearch";
                command.Connection = (EntityConnection)this.Connection;
                EntityParameter p_currencyParameter = new EntityParameter("p_currency", System.Data.DbType.String);
                p_currencyParameter.Direction = ParameterDirection.Input;
                if (p_currency != null)
                  p_currencyParameter.Value = p_currency;
                command.Parameters.Add(p_currencyParameter);
                EntityParameter p_properties_typeParameter = new EntityParameter("p_properties_type", System.Data.DbType.String);
                p_properties_typeParameter.Direction = ParameterDirection.Input;
                if (p_properties_type != null)
                  p_properties_typeParameter.Value = p_properties_type;
                command.Parameters.Add(p_properties_typeParameter);
                EntityParameter p_category_nameParameter = new EntityParameter("p_category_name", System.Data.DbType.String);
                p_category_nameParameter.Direction = ParameterDirection.Input;
                if (p_category_name != null)
                  p_category_nameParameter.Value = p_category_name;
                command.Parameters.Add(p_category_nameParameter);
                EntityParameter p_cityParameter = new EntityParameter("p_city", System.Data.DbType.String);
                p_cityParameter.Direction = ParameterDirection.Input;
                if (p_city != null)
                  p_cityParameter.Value = p_city;
                command.Parameters.Add(p_cityParameter);
                EntityParameter p_BedroomsParameter = new EntityParameter("p_Bedrooms", System.Data.DbType.Int32);
                p_BedroomsParameter.Direction = ParameterDirection.Input;
                if (p_Bedrooms.HasValue)
                  p_BedroomsParameter.Value = p_Bedrooms;
                command.Parameters.Add(p_BedroomsParameter);
                EntityParameter p_BathroomsParameter = new EntityParameter("p_Bathrooms", System.Data.DbType.Int32);
                p_BathroomsParameter.Direction = ParameterDirection.Input;
                if (p_Bathrooms.HasValue)
                  p_BathroomsParameter.Value = p_Bathrooms;
                command.Parameters.Add(p_BathroomsParameter);
                EntityParameter p_min_priceParameter = new EntityParameter("p_min_price", System.Data.DbType.Decimal);
                p_min_priceParameter.Direction = ParameterDirection.Input;
                if (p_min_price.HasValue)
                  p_min_priceParameter.Value = p_min_price;
                command.Parameters.Add(p_min_priceParameter);
                EntityParameter p_max_priceParameter = new EntityParameter("p_max_price", System.Data.DbType.Decimal);
                p_max_priceParameter.Direction = ParameterDirection.Input;
                if (p_max_price.HasValue)
                  p_max_priceParameter.Value = p_max_price;
                command.Parameters.Add(p_max_priceParameter);
                EntityParameter p_min_areaParameter = new EntityParameter("p_min_area", System.Data.DbType.Int32);
                p_min_areaParameter.Direction = ParameterDirection.Input;
                if (p_min_area.HasValue)
                  p_min_areaParameter.Value = p_min_area;
                command.Parameters.Add(p_min_areaParameter);
                EntityParameter p_max_areaParameter = new EntityParameter("p_max_area", System.Data.DbType.Int32);
                p_max_areaParameter.Direction = ParameterDirection.Input;
                if (p_max_area.HasValue)
                  p_max_areaParameter.Value = p_max_area;
                command.Parameters.Add(p_max_areaParameter);
                EntityParameter p_Display_typeParameter = new EntityParameter("p_Display_type", System.Data.DbType.String);
                p_Display_typeParameter.Direction = ParameterDirection.Input;
                if (p_Display_type != null)
                  p_Display_typeParameter.Value = p_Display_type;
                command.Parameters.Add(p_Display_typeParameter);
                command.ExecuteNonQuery();
              }
            }
            finally {
              if (needClose)
                this.Connection.Close();
            }
        }

        #endregion
    }

    #endregion
}

namespace RealEstateModel_mysql
{

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.AgentInfo in the schema.
    /// </summary>
    /// <KeyProperties>
    /// AgentId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="AgentInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AgentInfo : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new AgentInfo object.
        /// </summary>
        /// <param name="agentId">Initial value of AgentId.</param>
        /// <param name="agent">Initial value of Agent.</param>
        /// <param name="nationalNumber">Initial value of NationalNumber.</param>
        /// <param name="address">Initial value of Address.</param>
        /// <param name="email">Initial value of Email.</param>
        /// <param name="phoneNumber">Initial value of PhoneNumber.</param>
        /// <param name="whatsappInk">Initial value of WhatsappInk.</param>
        public static AgentInfo CreateAgentInfo(int agentId, string agent, int nationalNumber, string address, string email, string phoneNumber, string whatsappInk)
        {
            AgentInfo agentInfo = new AgentInfo();
            agentInfo.AgentId = agentId;
            agentInfo.Agent = agent;
            agentInfo.NationalNumber = nationalNumber;
            agentInfo.Address = address;
            agentInfo.Email = email;
            agentInfo.PhoneNumber = phoneNumber;
            agentInfo.WhatsappInk = whatsappInk;
            return agentInfo;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for AgentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int AgentId
        {
            get
            {
                int value = _AgentId;
                OnGetAgentId(ref value);
                return value;
            }
            set
            {
                if (_AgentId != value)
                {
                  OnAgentIdChanging(ref value);
                  ReportPropertyChanging("AgentId");
                  _AgentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AgentId");
                  OnAgentIdChanged();
              }
            }
        }
        private int _AgentId;
        partial void OnGetAgentId(ref int value);
        partial void OnAgentIdChanging(ref int value);
        partial void OnAgentIdChanged();
    
        /// <summary>
        /// There are no comments for Agent in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Agent
        {
            get
            {
                string value = _Agent;
                OnGetAgent(ref value);
                return value;
            }
            set
            {
                if (_Agent != value)
                {
                  OnAgentChanging(ref value);
                  ReportPropertyChanging("Agent");
                  _Agent = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Agent");
                  OnAgentChanged();
              }
            }
        }
        private string _Agent;
        partial void OnGetAgent(ref string value);
        partial void OnAgentChanging(ref string value);
        partial void OnAgentChanged();
    
        /// <summary>
        /// There are no comments for NationalNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NationalNumber
        {
            get
            {
                int value = _NationalNumber;
                OnGetNationalNumber(ref value);
                return value;
            }
            set
            {
                if (_NationalNumber != value)
                {
                  OnNationalNumberChanging(ref value);
                  ReportPropertyChanging("NationalNumber");
                  _NationalNumber = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NationalNumber");
                  OnNationalNumberChanged();
              }
            }
        }
        private int _NationalNumber;
        partial void OnGetNationalNumber(ref int value);
        partial void OnNationalNumberChanging(ref int value);
        partial void OnNationalNumberChanged();
    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PhoneNumber
        {
            get
            {
                string value = _PhoneNumber;
                OnGetPhoneNumber(ref value);
                return value;
            }
            set
            {
                if (_PhoneNumber != value)
                {
                  OnPhoneNumberChanging(ref value);
                  ReportPropertyChanging("PhoneNumber");
                  _PhoneNumber = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PhoneNumber");
                  OnPhoneNumberChanged();
              }
            }
        }
        private string _PhoneNumber;
        partial void OnGetPhoneNumber(ref string value);
        partial void OnPhoneNumberChanging(ref string value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// There are no comments for WhatsappInk in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string WhatsappInk
        {
            get
            {
                string value = _WhatsappInk;
                OnGetWhatsappInk(ref value);
                return value;
            }
            set
            {
                if (_WhatsappInk != value)
                {
                  OnWhatsappInkChanging(ref value);
                  ReportPropertyChanging("WhatsappInk");
                  _WhatsappInk = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("WhatsappInk");
                  OnWhatsappInkChanged();
              }
            }
        }
        private string _WhatsappInk;
        partial void OnGetWhatsappInk(ref string value);
        partial void OnWhatsappInkChanging(ref string value);
        partial void OnWhatsappInkChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Properties in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__agent__075714DC", "Properties")]
        public virtual EntityCollection<Property> Properties
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Property>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Property>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "Properties", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.Category in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CategoryId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="Category")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Category : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Category object.
        /// </summary>
        /// <param name="categoryId">Initial value of CategoryId.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        public static Category CreateCategory(int categoryId, string categoryName)
        {
            Category category = new Category();
            category.CategoryId = categoryId;
            category.CategoryName = categoryName;
            return category;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CategoryId
        {
            get
            {
                int value = _CategoryId;
                OnGetCategoryId(ref value);
                return value;
            }
            set
            {
                if (_CategoryId != value)
                {
                  OnCategoryIdChanging(ref value);
                  ReportPropertyChanging("CategoryId");
                  _CategoryId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryId");
                  OnCategoryIdChanged();
              }
            }
        }
        private int _CategoryId;
        partial void OnGetCategoryId(ref int value);
        partial void OnCategoryIdChanging(ref int value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Properties in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__categ__55F4C372", "Properties")]
        public virtual EntityCollection<Property> Properties
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Property>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Property>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Properties", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.CompanyInfo in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="CompanyInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompanyInfo : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new CompanyInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="ceoName">Initial value of CeoName.</param>
        /// <param name="companyName">Initial value of CompanyName.</param>
        /// <param name="comapnyLocationLink">Initial value of ComapnyLocationLink.</param>
        /// <param name="address">Initial value of Address.</param>
        /// <param name="email">Initial value of Email.</param>
        /// <param name="phoneNumber">Initial value of PhoneNumber.</param>
        /// <param name="comapnyVideoLink">Initial value of ComapnyVideoLink.</param>
        public static CompanyInfo CreateCompanyInfo(int id, string ceoName, string companyName, string comapnyLocationLink, string address, string email, string phoneNumber, string comapnyVideoLink)
        {
            CompanyInfo companyInfo = new CompanyInfo();
            companyInfo.Id = id;
            companyInfo.CeoName = ceoName;
            companyInfo.CompanyName = companyName;
            companyInfo.ComapnyLocationLink = comapnyLocationLink;
            companyInfo.Address = address;
            companyInfo.Email = email;
            companyInfo.PhoneNumber = phoneNumber;
            companyInfo.ComapnyVideoLink = comapnyVideoLink;
            return companyInfo;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for CeoName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CeoName
        {
            get
            {
                string value = _CeoName;
                OnGetCeoName(ref value);
                return value;
            }
            set
            {
                if (_CeoName != value)
                {
                  OnCeoNameChanging(ref value);
                  ReportPropertyChanging("CeoName");
                  _CeoName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CeoName");
                  OnCeoNameChanged();
              }
            }
        }
        private string _CeoName;
        partial void OnGetCeoName(ref string value);
        partial void OnCeoNameChanging(ref string value);
        partial void OnCeoNameChanged();
    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyName
        {
            get
            {
                string value = _CompanyName;
                OnGetCompanyName(ref value);
                return value;
            }
            set
            {
                if (_CompanyName != value)
                {
                  OnCompanyNameChanging(ref value);
                  ReportPropertyChanging("CompanyName");
                  _CompanyName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyName");
                  OnCompanyNameChanged();
              }
            }
        }
        private string _CompanyName;
        partial void OnGetCompanyName(ref string value);
        partial void OnCompanyNameChanging(ref string value);
        partial void OnCompanyNameChanged();
    
        /// <summary>
        /// There are no comments for ComapnyLocationLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ComapnyLocationLink
        {
            get
            {
                string value = _ComapnyLocationLink;
                OnGetComapnyLocationLink(ref value);
                return value;
            }
            set
            {
                if (_ComapnyLocationLink != value)
                {
                  OnComapnyLocationLinkChanging(ref value);
                  ReportPropertyChanging("ComapnyLocationLink");
                  _ComapnyLocationLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ComapnyLocationLink");
                  OnComapnyLocationLinkChanged();
              }
            }
        }
        private string _ComapnyLocationLink;
        partial void OnGetComapnyLocationLink(ref string value);
        partial void OnComapnyLocationLinkChanging(ref string value);
        partial void OnComapnyLocationLinkChanged();
    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PhoneNumber
        {
            get
            {
                string value = _PhoneNumber;
                OnGetPhoneNumber(ref value);
                return value;
            }
            set
            {
                if (_PhoneNumber != value)
                {
                  OnPhoneNumberChanging(ref value);
                  ReportPropertyChanging("PhoneNumber");
                  _PhoneNumber = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PhoneNumber");
                  OnPhoneNumberChanged();
              }
            }
        }
        private string _PhoneNumber;
        partial void OnGetPhoneNumber(ref string value);
        partial void OnPhoneNumberChanging(ref string value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// There are no comments for FacebookLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FacebookLink
        {
            get
            {
                string value = _FacebookLink;
                OnGetFacebookLink(ref value);
                return value;
            }
            set
            {
                if (_FacebookLink != value)
                {
                  OnFacebookLinkChanging(ref value);
                  ReportPropertyChanging("FacebookLink");
                  _FacebookLink = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("FacebookLink");
                  OnFacebookLinkChanged();
              }
            }
        }
        private string _FacebookLink;
        partial void OnGetFacebookLink(ref string value);
        partial void OnFacebookLinkChanging(ref string value);
        partial void OnFacebookLinkChanged();
    
        /// <summary>
        /// There are no comments for InstagramLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string InstagramLink
        {
            get
            {
                string value = _InstagramLink;
                OnGetInstagramLink(ref value);
                return value;
            }
            set
            {
                if (_InstagramLink != value)
                {
                  OnInstagramLinkChanging(ref value);
                  ReportPropertyChanging("InstagramLink");
                  _InstagramLink = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("InstagramLink");
                  OnInstagramLinkChanged();
              }
            }
        }
        private string _InstagramLink;
        partial void OnGetInstagramLink(ref string value);
        partial void OnInstagramLinkChanging(ref string value);
        partial void OnInstagramLinkChanged();
    
        /// <summary>
        /// There are no comments for TwitterLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string TwitterLink
        {
            get
            {
                string value = _TwitterLink;
                OnGetTwitterLink(ref value);
                return value;
            }
            set
            {
                if (_TwitterLink != value)
                {
                  OnTwitterLinkChanging(ref value);
                  ReportPropertyChanging("TwitterLink");
                  _TwitterLink = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("TwitterLink");
                  OnTwitterLinkChanged();
              }
            }
        }
        private string _TwitterLink;
        partial void OnGetTwitterLink(ref string value);
        partial void OnTwitterLinkChanging(ref string value);
        partial void OnTwitterLinkChanged();
    
        /// <summary>
        /// There are no comments for LinkedinLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string LinkedinLink
        {
            get
            {
                string value = _LinkedinLink;
                OnGetLinkedinLink(ref value);
                return value;
            }
            set
            {
                if (_LinkedinLink != value)
                {
                  OnLinkedinLinkChanging(ref value);
                  ReportPropertyChanging("LinkedinLink");
                  _LinkedinLink = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("LinkedinLink");
                  OnLinkedinLinkChanged();
              }
            }
        }
        private string _LinkedinLink;
        partial void OnGetLinkedinLink(ref string value);
        partial void OnLinkedinLinkChanging(ref string value);
        partial void OnLinkedinLinkChanged();
    
        /// <summary>
        /// There are no comments for YoutubeLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string YoutubeLink
        {
            get
            {
                string value = _YoutubeLink;
                OnGetYoutubeLink(ref value);
                return value;
            }
            set
            {
                if (_YoutubeLink != value)
                {
                  OnYoutubeLinkChanging(ref value);
                  ReportPropertyChanging("YoutubeLink");
                  _YoutubeLink = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("YoutubeLink");
                  OnYoutubeLinkChanged();
              }
            }
        }
        private string _YoutubeLink;
        partial void OnGetYoutubeLink(ref string value);
        partial void OnYoutubeLinkChanging(ref string value);
        partial void OnYoutubeLinkChanged();
    
        /// <summary>
        /// There are no comments for ComapnyVideoLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ComapnyVideoLink
        {
            get
            {
                string value = _ComapnyVideoLink;
                OnGetComapnyVideoLink(ref value);
                return value;
            }
            set
            {
                if (_ComapnyVideoLink != value)
                {
                  OnComapnyVideoLinkChanging(ref value);
                  ReportPropertyChanging("ComapnyVideoLink");
                  _ComapnyVideoLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ComapnyVideoLink");
                  OnComapnyVideoLinkChanged();
              }
            }
        }
        private string _ComapnyVideoLink;
        partial void OnGetComapnyVideoLink(ref string value);
        partial void OnComapnyVideoLinkChanging(ref string value);
        partial void OnComapnyVideoLinkChanged();

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.PortalUser in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="PortalUser")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PortalUser : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new PortalUser object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="login">Initial value of Login.</param>
        /// <param name="password">Initial value of Password.</param>
        public static PortalUser CreatePortalUser(int id, string login, string password)
        {
            PortalUser portalUser = new PortalUser();
            portalUser.Id = id;
            portalUser.Login = login;
            portalUser.Password = password;
            return portalUser;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Login
        {
            get
            {
                string value = _Login;
                OnGetLogin(ref value);
                return value;
            }
            set
            {
                if (_Login != value)
                {
                  OnLoginChanging(ref value);
                  ReportPropertyChanging("Login");
                  _Login = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Login");
                  OnLoginChanged();
              }
            }
        }
        private string _Login;
        partial void OnGetLogin(ref string value);
        partial void OnLoginChanging(ref string value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Password
        {
            get
            {
                string value = _Password;
                OnGetPassword(ref value);
                return value;
            }
            set
            {
                if (_Password != value)
                {
                  OnPasswordChanging(ref value);
                  ReportPropertyChanging("Password");
                  _Password = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Password");
                  OnPasswordChanged();
              }
            }
        }
        private string _Password;
        partial void OnGetPassword(ref string value);
        partial void OnPasswordChanging(ref string value);
        partial void OnPasswordChanged();

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.Property in the schema.
    /// </summary>
    /// <KeyProperties>
    /// IdProperties
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="Property")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Property : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Property object.
        /// </summary>
        /// <param name="idProperties">Initial value of IdProperties.</param>
        /// <param name="categoryId">Initial value of CategoryId.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="imagePath">Initial value of ImagePath.</param>
        /// <param name="propertiesType">Initial value of PropertiesType.</param>
        /// <param name="agentId">Initial value of AgentId.</param>
        public static Property CreateProperty(int idProperties, int categoryId, string title, string imagePath, string propertiesType, int agentId)
        {
            Property property = new Property();
            property.IdProperties = idProperties;
            property.CategoryId = categoryId;
            property.Title = title;
            property.ImagePath = imagePath;
            property.PropertiesType = propertiesType;
            property.AgentId = agentId;
            return property;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for IdProperties in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdProperties
        {
            get
            {
                int value = _IdProperties;
                OnGetIdProperties(ref value);
                return value;
            }
            set
            {
                if (_IdProperties != value)
                {
                  OnIdPropertiesChanging(ref value);
                  ReportPropertyChanging("IdProperties");
                  _IdProperties = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdProperties");
                  OnIdPropertiesChanged();
              }
            }
        }
        private int _IdProperties;
        partial void OnGetIdProperties(ref int value);
        partial void OnIdPropertiesChanging(ref int value);
        partial void OnIdPropertiesChanged();
    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CategoryId
        {
            get
            {
                int value = _CategoryId;
                OnGetCategoryId(ref value);
                return value;
            }
            set
            {
                if (_CategoryId != value)
                {
                  OnCategoryIdChanging(ref value);
                  ReportPropertyChanging("CategoryId");
                  _CategoryId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryId");
                  OnCategoryIdChanged();
              }
            }
        }
        private int _CategoryId;
        partial void OnGetCategoryId(ref int value);
        partial void OnCategoryIdChanging(ref int value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for ImagePath in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ImagePath
        {
            get
            {
                string value = _ImagePath;
                OnGetImagePath(ref value);
                return value;
            }
            set
            {
                if (_ImagePath != value)
                {
                  OnImagePathChanging(ref value);
                  ReportPropertyChanging("ImagePath");
                  _ImagePath = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ImagePath");
                  OnImagePathChanged();
              }
            }
        }
        private string _ImagePath;
        partial void OnGetImagePath(ref string value);
        partial void OnImagePathChanging(ref string value);
        partial void OnImagePathChanged();
    
        /// <summary>
        /// There are no comments for PropertiesType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PropertiesType
        {
            get
            {
                string value = _PropertiesType;
                OnGetPropertiesType(ref value);
                return value;
            }
            set
            {
                if (_PropertiesType != value)
                {
                  OnPropertiesTypeChanging(ref value);
                  ReportPropertyChanging("PropertiesType");
                  _PropertiesType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PropertiesType");
                  OnPropertiesTypeChanged();
              }
            }
        }
        private string _PropertiesType;
        partial void OnGetPropertiesType(ref string value);
        partial void OnPropertiesTypeChanging(ref string value);
        partial void OnPropertiesTypeChanged();
    
        /// <summary>
        /// There are no comments for OrginatorID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string OrginatorID
        {
            get
            {
                string value = _OrginatorID;
                OnGetOrginatorID(ref value);
                return value;
            }
            set
            {
                if (_OrginatorID != value)
                {
                  OnOrginatorIDChanging(ref value);
                  ReportPropertyChanging("OrginatorID");
                  _OrginatorID = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("OrginatorID");
                  OnOrginatorIDChanged();
              }
            }
        }
        private string _OrginatorID;
        partial void OnGetOrginatorID(ref string value);
        partial void OnOrginatorIDChanging(ref string value);
        partial void OnOrginatorIDChanged();
    
        /// <summary>
        /// There are no comments for AgentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int AgentId
        {
            get
            {
                int value = _AgentId;
                OnGetAgentId(ref value);
                return value;
            }
            set
            {
                if (_AgentId != value)
                {
                  OnAgentIdChanging(ref value);
                  ReportPropertyChanging("AgentId");
                  _AgentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AgentId");
                  OnAgentIdChanged();
              }
            }
        }
        private int _AgentId;
        partial void OnGetAgentId(ref int value);
        partial void OnAgentIdChanging(ref int value);
        partial void OnAgentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for AgentInfo in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__agent__075714DC", "AgentInfo")]
        public virtual AgentInfo AgentInfo
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AgentInfo>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "AgentInfo").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AgentInfo>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "AgentInfo").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for AgentInfo in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AgentInfo> AgentInfoReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AgentInfo>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "AgentInfo");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<AgentInfo>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "AgentInfo", value);
                }
                else
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AgentInfo>("RealEstateModel_mysql.FK__propertie__agent__075714DC", "AgentInfo").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__categ__55F4C372", "Category")]
        public virtual Category Category
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Category").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Category> CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Category");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Category>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Category", value);
                }
                else
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RealEstateModel_mysql.FK__propertie__categ__55F4C372", "Category").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for PropertiesInfos in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__id_pr__5BAD9CC8", "PropertiesInfos")]
        public virtual EntityCollection<PropertiesInfo> PropertiesInfos
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PropertiesInfo>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "PropertiesInfos");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PropertiesInfo>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "PropertiesInfos", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.PropertiesInfo in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="PropertiesInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PropertiesInfo : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new PropertiesInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="idProperties">Initial value of IdProperties.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="address">Initial value of Address.</param>
        /// <param name="infoPropertie">Initial value of InfoPropertie.</param>
        /// <param name="yearBuilt">Initial value of YearBuilt.</param>
        /// <param name="bedrooms">Initial value of Bedrooms.</param>
        /// <param name="bathrooms">Initial value of Bathrooms.</param>
        /// <param name="area">Initial value of Area.</param>
        /// <param name="floor">Initial value of Floor.</param>
        /// <param name="parking">Initial value of Parking.</param>
        /// <param name="price">Initial value of Price.</param>
        /// <param name="currency">Initial value of Currency.</param>
        /// <param name="paymentMethod">Initial value of PaymentMethod.</param>
        /// <param name="longAddress">Initial value of LongAddress.</param>
        /// <param name="buildingType">Initial value of BuildingType.</param>
        /// <param name="displayType">Initial value of DisplayType.</param>
        /// <param name="furnishing">Initial value of Furnishing.</param>
        /// <param name="publichDate">Initial value of PublichDate.</param>
        /// <param name="mapLink">Initial value of MapLink.</param>
        /// <param name="youtubeVideoLink">Initial value of YoutubeVideoLink.</param>
        public static PropertiesInfo CreatePropertiesInfo(int id, int idProperties, string city, string address, string infoPropertie, int yearBuilt, int bedrooms, int bathrooms, int area, int floor, int parking, decimal price, string currency, string paymentMethod, string longAddress, string buildingType, string displayType, string furnishing, string publichDate, string mapLink, string youtubeVideoLink)
        {
            PropertiesInfo propertiesInfo = new PropertiesInfo();
            propertiesInfo.Id = id;
            propertiesInfo.IdProperties = idProperties;
            propertiesInfo.City = city;
            propertiesInfo.Address = address;
            propertiesInfo.InfoPropertie = infoPropertie;
            propertiesInfo.YearBuilt = yearBuilt;
            propertiesInfo.Bedrooms = bedrooms;
            propertiesInfo.Bathrooms = bathrooms;
            propertiesInfo.Area = area;
            propertiesInfo.Floor = floor;
            propertiesInfo.Parking = parking;
            propertiesInfo.Price = price;
            propertiesInfo.Currency = currency;
            propertiesInfo.PaymentMethod = paymentMethod;
            propertiesInfo.LongAddress = longAddress;
            propertiesInfo.BuildingType = buildingType;
            propertiesInfo.DisplayType = displayType;
            propertiesInfo.Furnishing = furnishing;
            propertiesInfo.PublichDate = publichDate;
            propertiesInfo.MapLink = mapLink;
            propertiesInfo.YoutubeVideoLink = youtubeVideoLink;
            return propertiesInfo;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for IdProperties in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdProperties
        {
            get
            {
                int value = _IdProperties;
                OnGetIdProperties(ref value);
                return value;
            }
            set
            {
                if (_IdProperties != value)
                {
                  OnIdPropertiesChanging(ref value);
                  ReportPropertyChanging("IdProperties");
                  _IdProperties = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdProperties");
                  OnIdPropertiesChanged();
              }
            }
        }
        private int _IdProperties;
        partial void OnGetIdProperties(ref int value);
        partial void OnIdPropertiesChanging(ref int value);
        partial void OnIdPropertiesChanged();
    
        /// <summary>
        /// There are no comments for Images in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Images
        {
            get
            {
                string value = _Images;
                OnGetImages(ref value);
                return value;
            }
            set
            {
                if (_Images != value)
                {
                  OnImagesChanging(ref value);
                  ReportPropertyChanging("Images");
                  _Images = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Images");
                  OnImagesChanged();
              }
            }
        }
        private string _Images;
        partial void OnGetImages(ref string value);
        partial void OnImagesChanging(ref string value);
        partial void OnImagesChanged();
    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// There are no comments for InfoPropertie in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string InfoPropertie
        {
            get
            {
                string value = _InfoPropertie;
                OnGetInfoPropertie(ref value);
                return value;
            }
            set
            {
                if (_InfoPropertie != value)
                {
                  OnInfoPropertieChanging(ref value);
                  ReportPropertyChanging("InfoPropertie");
                  _InfoPropertie = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("InfoPropertie");
                  OnInfoPropertieChanged();
              }
            }
        }
        private string _InfoPropertie;
        partial void OnGetInfoPropertie(ref string value);
        partial void OnInfoPropertieChanging(ref string value);
        partial void OnInfoPropertieChanged();
    
        /// <summary>
        /// There are no comments for YearBuilt in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int YearBuilt
        {
            get
            {
                int value = _YearBuilt;
                OnGetYearBuilt(ref value);
                return value;
            }
            set
            {
                if (_YearBuilt != value)
                {
                  OnYearBuiltChanging(ref value);
                  ReportPropertyChanging("YearBuilt");
                  _YearBuilt = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("YearBuilt");
                  OnYearBuiltChanged();
              }
            }
        }
        private int _YearBuilt;
        partial void OnGetYearBuilt(ref int value);
        partial void OnYearBuiltChanging(ref int value);
        partial void OnYearBuiltChanged();
    
        /// <summary>
        /// There are no comments for Bedrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bedrooms
        {
            get
            {
                int value = _Bedrooms;
                OnGetBedrooms(ref value);
                return value;
            }
            set
            {
                if (_Bedrooms != value)
                {
                  OnBedroomsChanging(ref value);
                  ReportPropertyChanging("Bedrooms");
                  _Bedrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bedrooms");
                  OnBedroomsChanged();
              }
            }
        }
        private int _Bedrooms;
        partial void OnGetBedrooms(ref int value);
        partial void OnBedroomsChanging(ref int value);
        partial void OnBedroomsChanged();
    
        /// <summary>
        /// There are no comments for Bathrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bathrooms
        {
            get
            {
                int value = _Bathrooms;
                OnGetBathrooms(ref value);
                return value;
            }
            set
            {
                if (_Bathrooms != value)
                {
                  OnBathroomsChanging(ref value);
                  ReportPropertyChanging("Bathrooms");
                  _Bathrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bathrooms");
                  OnBathroomsChanged();
              }
            }
        }
        private int _Bathrooms;
        partial void OnGetBathrooms(ref int value);
        partial void OnBathroomsChanging(ref int value);
        partial void OnBathroomsChanged();
    
        /// <summary>
        /// There are no comments for Area in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Area
        {
            get
            {
                int value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private int _Area;
        partial void OnGetArea(ref int value);
        partial void OnAreaChanging(ref int value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// There are no comments for Floor in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Floor
        {
            get
            {
                int value = _Floor;
                OnGetFloor(ref value);
                return value;
            }
            set
            {
                if (_Floor != value)
                {
                  OnFloorChanging(ref value);
                  ReportPropertyChanging("Floor");
                  _Floor = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Floor");
                  OnFloorChanged();
              }
            }
        }
        private int _Floor;
        partial void OnGetFloor(ref int value);
        partial void OnFloorChanging(ref int value);
        partial void OnFloorChanged();
    
        /// <summary>
        /// There are no comments for Parking in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Parking
        {
            get
            {
                int value = _Parking;
                OnGetParking(ref value);
                return value;
            }
            set
            {
                if (_Parking != value)
                {
                  OnParkingChanging(ref value);
                  ReportPropertyChanging("Parking");
                  _Parking = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Parking");
                  OnParkingChanged();
              }
            }
        }
        private int _Parking;
        partial void OnGetParking(ref int value);
        partial void OnParkingChanging(ref int value);
        partial void OnParkingChanged();
    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Price
        {
            get
            {
                decimal value = _Price;
                OnGetPrice(ref value);
                return value;
            }
            set
            {
                if (_Price != value)
                {
                  OnPriceChanging(ref value);
                  ReportPropertyChanging("Price");
                  _Price = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Price");
                  OnPriceChanged();
              }
            }
        }
        private decimal _Price;
        partial void OnGetPrice(ref decimal value);
        partial void OnPriceChanging(ref decimal value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Currency
        {
            get
            {
                string value = _Currency;
                OnGetCurrency(ref value);
                return value;
            }
            set
            {
                if (_Currency != value)
                {
                  OnCurrencyChanging(ref value);
                  ReportPropertyChanging("Currency");
                  _Currency = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Currency");
                  OnCurrencyChanged();
              }
            }
        }
        private string _Currency;
        partial void OnGetCurrency(ref string value);
        partial void OnCurrencyChanging(ref string value);
        partial void OnCurrencyChanged();
    
        /// <summary>
        /// There are no comments for PaymentMethod in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PaymentMethod
        {
            get
            {
                string value = _PaymentMethod;
                OnGetPaymentMethod(ref value);
                return value;
            }
            set
            {
                if (_PaymentMethod != value)
                {
                  OnPaymentMethodChanging(ref value);
                  ReportPropertyChanging("PaymentMethod");
                  _PaymentMethod = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PaymentMethod");
                  OnPaymentMethodChanged();
              }
            }
        }
        private string _PaymentMethod;
        partial void OnGetPaymentMethod(ref string value);
        partial void OnPaymentMethodChanging(ref string value);
        partial void OnPaymentMethodChanged();
    
        /// <summary>
        /// There are no comments for LongAddress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string LongAddress
        {
            get
            {
                string value = _LongAddress;
                OnGetLongAddress(ref value);
                return value;
            }
            set
            {
                if (_LongAddress != value)
                {
                  OnLongAddressChanging(ref value);
                  ReportPropertyChanging("LongAddress");
                  _LongAddress = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LongAddress");
                  OnLongAddressChanged();
              }
            }
        }
        private string _LongAddress;
        partial void OnGetLongAddress(ref string value);
        partial void OnLongAddressChanging(ref string value);
        partial void OnLongAddressChanged();
    
        /// <summary>
        /// There are no comments for BuildingType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string BuildingType
        {
            get
            {
                string value = _BuildingType;
                OnGetBuildingType(ref value);
                return value;
            }
            set
            {
                if (_BuildingType != value)
                {
                  OnBuildingTypeChanging(ref value);
                  ReportPropertyChanging("BuildingType");
                  _BuildingType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("BuildingType");
                  OnBuildingTypeChanged();
              }
            }
        }
        private string _BuildingType;
        partial void OnGetBuildingType(ref string value);
        partial void OnBuildingTypeChanging(ref string value);
        partial void OnBuildingTypeChanged();
    
        /// <summary>
        /// There are no comments for DisplayType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DisplayType
        {
            get
            {
                string value = _DisplayType;
                OnGetDisplayType(ref value);
                return value;
            }
            set
            {
                if (_DisplayType != value)
                {
                  OnDisplayTypeChanging(ref value);
                  ReportPropertyChanging("DisplayType");
                  _DisplayType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DisplayType");
                  OnDisplayTypeChanged();
              }
            }
        }
        private string _DisplayType;
        partial void OnGetDisplayType(ref string value);
        partial void OnDisplayTypeChanging(ref string value);
        partial void OnDisplayTypeChanged();
    
        /// <summary>
        /// There are no comments for Furnishing in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Furnishing
        {
            get
            {
                string value = _Furnishing;
                OnGetFurnishing(ref value);
                return value;
            }
            set
            {
                if (_Furnishing != value)
                {
                  OnFurnishingChanging(ref value);
                  ReportPropertyChanging("Furnishing");
                  _Furnishing = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Furnishing");
                  OnFurnishingChanged();
              }
            }
        }
        private string _Furnishing;
        partial void OnGetFurnishing(ref string value);
        partial void OnFurnishingChanging(ref string value);
        partial void OnFurnishingChanged();
    
        /// <summary>
        /// There are no comments for PublichDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PublichDate
        {
            get
            {
                string value = _PublichDate;
                OnGetPublichDate(ref value);
                return value;
            }
            set
            {
                if (_PublichDate != value)
                {
                  OnPublichDateChanging(ref value);
                  ReportPropertyChanging("PublichDate");
                  _PublichDate = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PublichDate");
                  OnPublichDateChanged();
              }
            }
        }
        private string _PublichDate;
        partial void OnGetPublichDate(ref string value);
        partial void OnPublichDateChanging(ref string value);
        partial void OnPublichDateChanged();
    
        /// <summary>
        /// There are no comments for MapLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string MapLink
        {
            get
            {
                string value = _MapLink;
                OnGetMapLink(ref value);
                return value;
            }
            set
            {
                if (_MapLink != value)
                {
                  OnMapLinkChanging(ref value);
                  ReportPropertyChanging("MapLink");
                  _MapLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("MapLink");
                  OnMapLinkChanged();
              }
            }
        }
        private string _MapLink;
        partial void OnGetMapLink(ref string value);
        partial void OnMapLinkChanging(ref string value);
        partial void OnMapLinkChanged();
    
        /// <summary>
        /// There are no comments for YoutubeVideoLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string YoutubeVideoLink
        {
            get
            {
                string value = _YoutubeVideoLink;
                OnGetYoutubeVideoLink(ref value);
                return value;
            }
            set
            {
                if (_YoutubeVideoLink != value)
                {
                  OnYoutubeVideoLinkChanging(ref value);
                  ReportPropertyChanging("YoutubeVideoLink");
                  _YoutubeVideoLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("YoutubeVideoLink");
                  OnYoutubeVideoLinkChanged();
              }
            }
        }
        private string _YoutubeVideoLink;
        partial void OnGetYoutubeVideoLink(ref string value);
        partial void OnYoutubeVideoLinkChanging(ref string value);
        partial void OnYoutubeVideoLinkChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Property in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RealEstateModel_mysql", "FK__propertie__id_pr__5BAD9CC8", "Property")]
        public virtual Property Property
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Property>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "Property").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Property>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "Property").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Property in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Property>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "Property");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Property>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "Property", value);
                }
                else
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Property>("RealEstateModel_mysql.FK__propertie__id_pr__5BAD9CC8", "Property").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.User in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static User CreateUser(int id)
        {
            User user = new User();
            user.Id = id;
            return user;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UserName
        {
            get
            {
                string value = _UserName;
                OnGetUserName(ref value);
                return value;
            }
            set
            {
                if (_UserName != value)
                {
                  OnUserNameChanging(ref value);
                  ReportPropertyChanging("UserName");
                  _UserName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("UserName");
                  OnUserNameChanged();
              }
            }
        }
        private string _UserName;
        partial void OnGetUserName(ref string value);
        partial void OnUserNameChanging(ref string value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Login
        {
            get
            {
                string value = _Login;
                OnGetLogin(ref value);
                return value;
            }
            set
            {
                if (_Login != value)
                {
                  OnLoginChanging(ref value);
                  ReportPropertyChanging("Login");
                  _Login = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Login");
                  OnLoginChanged();
              }
            }
        }
        private string _Login;
        partial void OnGetLogin(ref string value);
        partial void OnLoginChanging(ref string value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Password
        {
            get
            {
                string value = _Password;
                OnGetPassword(ref value);
                return value;
            }
            set
            {
                if (_Password != value)
                {
                  OnPasswordChanging(ref value);
                  ReportPropertyChanging("Password");
                  _Password = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Password");
                  OnPasswordChanged();
              }
            }
        }
        private string _Password;
        partial void OnGetPassword(ref string value);
        partial void OnPasswordChanging(ref string value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// There are no comments for IsHRAdmin in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual bool? IsHRAdmin
        {
            get
            {
                bool? value = _IsHRAdmin;
                OnGetIsHRAdmin(ref value);
                return value;
            }
            set
            {
                if (_IsHRAdmin != value)
                {
                  OnIsHRAdminChanging(ref value);
                  ReportPropertyChanging("IsHRAdmin");
                  _IsHRAdmin = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsHRAdmin");
                  OnIsHRAdminChanged();
              }
            }
        }
        private bool? _IsHRAdmin;
        partial void OnGetIsHRAdmin(ref bool? value);
        partial void OnIsHRAdminChanging(ref bool? value);
        partial void OnIsHRAdminChanged();

        #endregion
    }

    /// <summary>
    /// VIEW
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// PropertiesType
    /// CategoryName
    /// ImagePath
    /// Title
    /// City
    /// Address
    /// LongAddress
    /// IdProperties
    /// YearBuilt
    /// Floor
    /// Area
    /// Bedrooms
    /// Bathrooms
    /// Parking
    /// ParkingAvailable
    /// InfoPropertie
    /// Price
    /// PaymentMethod
    /// Currency
    /// BuildingType
    /// DisplayType
    /// Furnishing
    /// PublichDate
    /// MapLink
    /// YoutubeVideoLink
    /// Agent
    /// PhoneNumber
    /// WhatsappInk
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="VAllproperty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VAllproperty : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new VAllproperty object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="propertiesType">Initial value of PropertiesType.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        /// <param name="imagePath">Initial value of ImagePath.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="address">Initial value of Address.</param>
        /// <param name="longAddress">Initial value of LongAddress.</param>
        /// <param name="idProperties">Initial value of IdProperties.</param>
        /// <param name="yearBuilt">Initial value of YearBuilt.</param>
        /// <param name="floor">Initial value of Floor.</param>
        /// <param name="area">Initial value of Area.</param>
        /// <param name="bedrooms">Initial value of Bedrooms.</param>
        /// <param name="bathrooms">Initial value of Bathrooms.</param>
        /// <param name="parking">Initial value of Parking.</param>
        /// <param name="parkingAvailable">Initial value of ParkingAvailable.</param>
        /// <param name="infoPropertie">Initial value of InfoPropertie.</param>
        /// <param name="price">Initial value of Price.</param>
        /// <param name="paymentMethod">Initial value of PaymentMethod.</param>
        /// <param name="currency">Initial value of Currency.</param>
        /// <param name="buildingType">Initial value of BuildingType.</param>
        /// <param name="displayType">Initial value of DisplayType.</param>
        /// <param name="furnishing">Initial value of Furnishing.</param>
        /// <param name="publichDate">Initial value of PublichDate.</param>
        /// <param name="mapLink">Initial value of MapLink.</param>
        /// <param name="youtubeVideoLink">Initial value of YoutubeVideoLink.</param>
        /// <param name="agent">Initial value of Agent.</param>
        /// <param name="phoneNumber">Initial value of PhoneNumber.</param>
        /// <param name="whatsappInk">Initial value of WhatsappInk.</param>
        public static VAllproperty CreateVAllproperty(int id, string propertiesType, string categoryName, string imagePath, string title, string city, string address, string longAddress, int idProperties, int yearBuilt, int floor, int area, int bedrooms, int bathrooms, int parking, string parkingAvailable, string infoPropertie, decimal price, string paymentMethod, string currency, string buildingType, string displayType, string furnishing, string publichDate, string mapLink, string youtubeVideoLink, string agent, string phoneNumber, string whatsappInk)
        {
            VAllproperty vAllproperty = new VAllproperty();
            vAllproperty.Id = id;
            vAllproperty.PropertiesType = propertiesType;
            vAllproperty.CategoryName = categoryName;
            vAllproperty.ImagePath = imagePath;
            vAllproperty.Title = title;
            vAllproperty.City = city;
            vAllproperty.Address = address;
            vAllproperty.LongAddress = longAddress;
            vAllproperty.IdProperties = idProperties;
            vAllproperty.YearBuilt = yearBuilt;
            vAllproperty.Floor = floor;
            vAllproperty.Area = area;
            vAllproperty.Bedrooms = bedrooms;
            vAllproperty.Bathrooms = bathrooms;
            vAllproperty.Parking = parking;
            vAllproperty.ParkingAvailable = parkingAvailable;
            vAllproperty.InfoPropertie = infoPropertie;
            vAllproperty.Price = price;
            vAllproperty.PaymentMethod = paymentMethod;
            vAllproperty.Currency = currency;
            vAllproperty.BuildingType = buildingType;
            vAllproperty.DisplayType = displayType;
            vAllproperty.Furnishing = furnishing;
            vAllproperty.PublichDate = publichDate;
            vAllproperty.MapLink = mapLink;
            vAllproperty.YoutubeVideoLink = youtubeVideoLink;
            vAllproperty.Agent = agent;
            vAllproperty.PhoneNumber = phoneNumber;
            vAllproperty.WhatsappInk = whatsappInk;
            return vAllproperty;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for PropertiesType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PropertiesType
        {
            get
            {
                string value = _PropertiesType;
                OnGetPropertiesType(ref value);
                return value;
            }
            set
            {
                if (_PropertiesType != value)
                {
                  OnPropertiesTypeChanging(ref value);
                  ReportPropertyChanging("PropertiesType");
                  _PropertiesType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PropertiesType");
                  OnPropertiesTypeChanged();
              }
            }
        }
        private string _PropertiesType;
        partial void OnGetPropertiesType(ref string value);
        partial void OnPropertiesTypeChanging(ref string value);
        partial void OnPropertiesTypeChanged();
    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// There are no comments for ImagePath in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ImagePath
        {
            get
            {
                string value = _ImagePath;
                OnGetImagePath(ref value);
                return value;
            }
            set
            {
                if (_ImagePath != value)
                {
                  OnImagePathChanging(ref value);
                  ReportPropertyChanging("ImagePath");
                  _ImagePath = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ImagePath");
                  OnImagePathChanged();
              }
            }
        }
        private string _ImagePath;
        partial void OnGetImagePath(ref string value);
        partial void OnImagePathChanging(ref string value);
        partial void OnImagePathChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// There are no comments for LongAddress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string LongAddress
        {
            get
            {
                string value = _LongAddress;
                OnGetLongAddress(ref value);
                return value;
            }
            set
            {
                if (_LongAddress != value)
                {
                  OnLongAddressChanging(ref value);
                  ReportPropertyChanging("LongAddress");
                  _LongAddress = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LongAddress");
                  OnLongAddressChanged();
              }
            }
        }
        private string _LongAddress;
        partial void OnGetLongAddress(ref string value);
        partial void OnLongAddressChanging(ref string value);
        partial void OnLongAddressChanged();
    
        /// <summary>
        /// There are no comments for IdProperties in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdProperties
        {
            get
            {
                int value = _IdProperties;
                OnGetIdProperties(ref value);
                return value;
            }
            set
            {
                if (_IdProperties != value)
                {
                  OnIdPropertiesChanging(ref value);
                  ReportPropertyChanging("IdProperties");
                  _IdProperties = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdProperties");
                  OnIdPropertiesChanged();
              }
            }
        }
        private int _IdProperties;
        partial void OnGetIdProperties(ref int value);
        partial void OnIdPropertiesChanging(ref int value);
        partial void OnIdPropertiesChanged();
    
        /// <summary>
        /// There are no comments for YearBuilt in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int YearBuilt
        {
            get
            {
                int value = _YearBuilt;
                OnGetYearBuilt(ref value);
                return value;
            }
            set
            {
                if (_YearBuilt != value)
                {
                  OnYearBuiltChanging(ref value);
                  ReportPropertyChanging("YearBuilt");
                  _YearBuilt = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("YearBuilt");
                  OnYearBuiltChanged();
              }
            }
        }
        private int _YearBuilt;
        partial void OnGetYearBuilt(ref int value);
        partial void OnYearBuiltChanging(ref int value);
        partial void OnYearBuiltChanged();
    
        /// <summary>
        /// There are no comments for Floor in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Floor
        {
            get
            {
                int value = _Floor;
                OnGetFloor(ref value);
                return value;
            }
            set
            {
                if (_Floor != value)
                {
                  OnFloorChanging(ref value);
                  ReportPropertyChanging("Floor");
                  _Floor = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Floor");
                  OnFloorChanged();
              }
            }
        }
        private int _Floor;
        partial void OnGetFloor(ref int value);
        partial void OnFloorChanging(ref int value);
        partial void OnFloorChanged();
    
        /// <summary>
        /// There are no comments for Area in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Area
        {
            get
            {
                int value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private int _Area;
        partial void OnGetArea(ref int value);
        partial void OnAreaChanging(ref int value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// There are no comments for Bedrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bedrooms
        {
            get
            {
                int value = _Bedrooms;
                OnGetBedrooms(ref value);
                return value;
            }
            set
            {
                if (_Bedrooms != value)
                {
                  OnBedroomsChanging(ref value);
                  ReportPropertyChanging("Bedrooms");
                  _Bedrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bedrooms");
                  OnBedroomsChanged();
              }
            }
        }
        private int _Bedrooms;
        partial void OnGetBedrooms(ref int value);
        partial void OnBedroomsChanging(ref int value);
        partial void OnBedroomsChanged();
    
        /// <summary>
        /// There are no comments for Bathrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bathrooms
        {
            get
            {
                int value = _Bathrooms;
                OnGetBathrooms(ref value);
                return value;
            }
            set
            {
                if (_Bathrooms != value)
                {
                  OnBathroomsChanging(ref value);
                  ReportPropertyChanging("Bathrooms");
                  _Bathrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bathrooms");
                  OnBathroomsChanged();
              }
            }
        }
        private int _Bathrooms;
        partial void OnGetBathrooms(ref int value);
        partial void OnBathroomsChanging(ref int value);
        partial void OnBathroomsChanged();
    
        /// <summary>
        /// There are no comments for Parking in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Parking
        {
            get
            {
                int value = _Parking;
                OnGetParking(ref value);
                return value;
            }
            set
            {
                if (_Parking != value)
                {
                  OnParkingChanging(ref value);
                  ReportPropertyChanging("Parking");
                  _Parking = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Parking");
                  OnParkingChanged();
              }
            }
        }
        private int _Parking;
        partial void OnGetParking(ref int value);
        partial void OnParkingChanging(ref int value);
        partial void OnParkingChanged();
    
        /// <summary>
        /// There are no comments for ParkingAvailable in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ParkingAvailable
        {
            get
            {
                string value = _ParkingAvailable;
                OnGetParkingAvailable(ref value);
                return value;
            }
            set
            {
                if (_ParkingAvailable != value)
                {
                  OnParkingAvailableChanging(ref value);
                  ReportPropertyChanging("ParkingAvailable");
                  _ParkingAvailable = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ParkingAvailable");
                  OnParkingAvailableChanged();
              }
            }
        }
        private string _ParkingAvailable;
        partial void OnGetParkingAvailable(ref string value);
        partial void OnParkingAvailableChanging(ref string value);
        partial void OnParkingAvailableChanged();
    
        /// <summary>
        /// There are no comments for InfoPropertie in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string InfoPropertie
        {
            get
            {
                string value = _InfoPropertie;
                OnGetInfoPropertie(ref value);
                return value;
            }
            set
            {
                if (_InfoPropertie != value)
                {
                  OnInfoPropertieChanging(ref value);
                  ReportPropertyChanging("InfoPropertie");
                  _InfoPropertie = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("InfoPropertie");
                  OnInfoPropertieChanged();
              }
            }
        }
        private string _InfoPropertie;
        partial void OnGetInfoPropertie(ref string value);
        partial void OnInfoPropertieChanging(ref string value);
        partial void OnInfoPropertieChanged();
    
        /// <summary>
        /// There are no comments for Images in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Images
        {
            get
            {
                string value = _Images;
                OnGetImages(ref value);
                return value;
            }
            set
            {
                if (_Images != value)
                {
                  OnImagesChanging(ref value);
                  ReportPropertyChanging("Images");
                  _Images = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Images");
                  OnImagesChanged();
              }
            }
        }
        private string _Images;
        partial void OnGetImages(ref string value);
        partial void OnImagesChanging(ref string value);
        partial void OnImagesChanged();
    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Price
        {
            get
            {
                decimal value = _Price;
                OnGetPrice(ref value);
                return value;
            }
            set
            {
                if (_Price != value)
                {
                  OnPriceChanging(ref value);
                  ReportPropertyChanging("Price");
                  _Price = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Price");
                  OnPriceChanged();
              }
            }
        }
        private decimal _Price;
        partial void OnGetPrice(ref decimal value);
        partial void OnPriceChanging(ref decimal value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// There are no comments for PaymentMethod in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PaymentMethod
        {
            get
            {
                string value = _PaymentMethod;
                OnGetPaymentMethod(ref value);
                return value;
            }
            set
            {
                if (_PaymentMethod != value)
                {
                  OnPaymentMethodChanging(ref value);
                  ReportPropertyChanging("PaymentMethod");
                  _PaymentMethod = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PaymentMethod");
                  OnPaymentMethodChanged();
              }
            }
        }
        private string _PaymentMethod;
        partial void OnGetPaymentMethod(ref string value);
        partial void OnPaymentMethodChanging(ref string value);
        partial void OnPaymentMethodChanged();
    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Currency
        {
            get
            {
                string value = _Currency;
                OnGetCurrency(ref value);
                return value;
            }
            set
            {
                if (_Currency != value)
                {
                  OnCurrencyChanging(ref value);
                  ReportPropertyChanging("Currency");
                  _Currency = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Currency");
                  OnCurrencyChanged();
              }
            }
        }
        private string _Currency;
        partial void OnGetCurrency(ref string value);
        partial void OnCurrencyChanging(ref string value);
        partial void OnCurrencyChanged();
    
        /// <summary>
        /// There are no comments for BuildingType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string BuildingType
        {
            get
            {
                string value = _BuildingType;
                OnGetBuildingType(ref value);
                return value;
            }
            set
            {
                if (_BuildingType != value)
                {
                  OnBuildingTypeChanging(ref value);
                  ReportPropertyChanging("BuildingType");
                  _BuildingType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("BuildingType");
                  OnBuildingTypeChanged();
              }
            }
        }
        private string _BuildingType;
        partial void OnGetBuildingType(ref string value);
        partial void OnBuildingTypeChanging(ref string value);
        partial void OnBuildingTypeChanged();
    
        /// <summary>
        /// There are no comments for DisplayType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DisplayType
        {
            get
            {
                string value = _DisplayType;
                OnGetDisplayType(ref value);
                return value;
            }
            set
            {
                if (_DisplayType != value)
                {
                  OnDisplayTypeChanging(ref value);
                  ReportPropertyChanging("DisplayType");
                  _DisplayType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DisplayType");
                  OnDisplayTypeChanged();
              }
            }
        }
        private string _DisplayType;
        partial void OnGetDisplayType(ref string value);
        partial void OnDisplayTypeChanging(ref string value);
        partial void OnDisplayTypeChanged();
    
        /// <summary>
        /// There are no comments for Furnishing in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Furnishing
        {
            get
            {
                string value = _Furnishing;
                OnGetFurnishing(ref value);
                return value;
            }
            set
            {
                if (_Furnishing != value)
                {
                  OnFurnishingChanging(ref value);
                  ReportPropertyChanging("Furnishing");
                  _Furnishing = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Furnishing");
                  OnFurnishingChanged();
              }
            }
        }
        private string _Furnishing;
        partial void OnGetFurnishing(ref string value);
        partial void OnFurnishingChanging(ref string value);
        partial void OnFurnishingChanged();
    
        /// <summary>
        /// There are no comments for PublichDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PublichDate
        {
            get
            {
                string value = _PublichDate;
                OnGetPublichDate(ref value);
                return value;
            }
            set
            {
                if (_PublichDate != value)
                {
                  OnPublichDateChanging(ref value);
                  ReportPropertyChanging("PublichDate");
                  _PublichDate = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PublichDate");
                  OnPublichDateChanged();
              }
            }
        }
        private string _PublichDate;
        partial void OnGetPublichDate(ref string value);
        partial void OnPublichDateChanging(ref string value);
        partial void OnPublichDateChanged();
    
        /// <summary>
        /// There are no comments for MapLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string MapLink
        {
            get
            {
                string value = _MapLink;
                OnGetMapLink(ref value);
                return value;
            }
            set
            {
                if (_MapLink != value)
                {
                  OnMapLinkChanging(ref value);
                  ReportPropertyChanging("MapLink");
                  _MapLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("MapLink");
                  OnMapLinkChanged();
              }
            }
        }
        private string _MapLink;
        partial void OnGetMapLink(ref string value);
        partial void OnMapLinkChanging(ref string value);
        partial void OnMapLinkChanged();
    
        /// <summary>
        /// There are no comments for YoutubeVideoLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string YoutubeVideoLink
        {
            get
            {
                string value = _YoutubeVideoLink;
                OnGetYoutubeVideoLink(ref value);
                return value;
            }
            set
            {
                if (_YoutubeVideoLink != value)
                {
                  OnYoutubeVideoLinkChanging(ref value);
                  ReportPropertyChanging("YoutubeVideoLink");
                  _YoutubeVideoLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("YoutubeVideoLink");
                  OnYoutubeVideoLinkChanged();
              }
            }
        }
        private string _YoutubeVideoLink;
        partial void OnGetYoutubeVideoLink(ref string value);
        partial void OnYoutubeVideoLinkChanging(ref string value);
        partial void OnYoutubeVideoLinkChanged();
    
        /// <summary>
        /// There are no comments for Agent in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Agent
        {
            get
            {
                string value = _Agent;
                OnGetAgent(ref value);
                return value;
            }
            set
            {
                if (_Agent != value)
                {
                  OnAgentChanging(ref value);
                  ReportPropertyChanging("Agent");
                  _Agent = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Agent");
                  OnAgentChanged();
              }
            }
        }
        private string _Agent;
        partial void OnGetAgent(ref string value);
        partial void OnAgentChanging(ref string value);
        partial void OnAgentChanged();
    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PhoneNumber
        {
            get
            {
                string value = _PhoneNumber;
                OnGetPhoneNumber(ref value);
                return value;
            }
            set
            {
                if (_PhoneNumber != value)
                {
                  OnPhoneNumberChanging(ref value);
                  ReportPropertyChanging("PhoneNumber");
                  _PhoneNumber = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PhoneNumber");
                  OnPhoneNumberChanged();
              }
            }
        }
        private string _PhoneNumber;
        partial void OnGetPhoneNumber(ref string value);
        partial void OnPhoneNumberChanging(ref string value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// There are no comments for WhatsappInk in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string WhatsappInk
        {
            get
            {
                string value = _WhatsappInk;
                OnGetWhatsappInk(ref value);
                return value;
            }
            set
            {
                if (_WhatsappInk != value)
                {
                  OnWhatsappInkChanging(ref value);
                  ReportPropertyChanging("WhatsappInk");
                  _WhatsappInk = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("WhatsappInk");
                  OnWhatsappInkChanged();
              }
            }
        }
        private string _WhatsappInk;
        partial void OnGetWhatsappInk(ref string value);
        partial void OnWhatsappInkChanging(ref string value);
        partial void OnWhatsappInkChanged();

        #endregion
    }

}

namespace RealEstateModel_mysql
{

    /// <summary>
    /// There are no comments for RealEstateModel_mysql.SPAllPropertiesByCurrencyResult in the schema.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="RealEstateModel_mysql", Name="SPAllPropertiesByCurrencyResult")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class SPAllPropertiesByCurrencyResult : ComplexObject    {
        #region Factory Method

        /// <summary>
        /// Create a new SPAllPropertiesByCurrencyResult object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="propertiesType">Initial value of PropertiesType.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        /// <param name="imagePath">Initial value of ImagePath.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="address">Initial value of Address.</param>
        /// <param name="longAddress">Initial value of LongAddress.</param>
        /// <param name="idProperties">Initial value of IdProperties.</param>
        /// <param name="yearBuilt">Initial value of YearBuilt.</param>
        /// <param name="floor">Initial value of Floor.</param>
        /// <param name="area">Initial value of Area.</param>
        /// <param name="bedrooms">Initial value of Bedrooms.</param>
        /// <param name="bathrooms">Initial value of Bathrooms.</param>
        /// <param name="parking">Initial value of Parking.</param>
        /// <param name="parkingAvailable">Initial value of ParkingAvailable.</param>
        /// <param name="infoPropertie">Initial value of InfoPropertie.</param>
        /// <param name="price">Initial value of Price.</param>
        /// <param name="paymentMethod">Initial value of PaymentMethod.</param>
        /// <param name="currency">Initial value of Currency.</param>
        /// <param name="buildingType">Initial value of BuildingType.</param>
        /// <param name="displayType">Initial value of DisplayType.</param>
        /// <param name="furnishing">Initial value of Furnishing.</param>
        /// <param name="publichDate">Initial value of PublichDate.</param>
        /// <param name="mapLink">Initial value of MapLink.</param>
        /// <param name="youtubeVideoLink">Initial value of YoutubeVideoLink.</param>
        /// <param name="agent">Initial value of Agent.</param>
        /// <param name="phoneNumber">Initial value of PhoneNumber.</param>
        /// <param name="whatsappInk">Initial value of WhatsappInk.</param>
        public static SPAllPropertiesByCurrencyResult CreateSPAllPropertiesByCurrencyResult(int id, string propertiesType, string categoryName, string imagePath, string title, string city, string address, string longAddress, int idProperties, int yearBuilt, int floor, int area, int bedrooms, int bathrooms, int parking, string parkingAvailable, string infoPropertie, decimal price, string paymentMethod, string currency, string buildingType, string displayType, string furnishing, string publichDate, string mapLink, string youtubeVideoLink, string agent, string phoneNumber, string whatsappInk)
        {
            SPAllPropertiesByCurrencyResult sPAllPropertiesByCurrencyResult = new SPAllPropertiesByCurrencyResult();
            sPAllPropertiesByCurrencyResult.Id = id;
            sPAllPropertiesByCurrencyResult.PropertiesType = propertiesType;
            sPAllPropertiesByCurrencyResult.CategoryName = categoryName;
            sPAllPropertiesByCurrencyResult.ImagePath = imagePath;
            sPAllPropertiesByCurrencyResult.Title = title;
            sPAllPropertiesByCurrencyResult.City = city;
            sPAllPropertiesByCurrencyResult.Address = address;
            sPAllPropertiesByCurrencyResult.LongAddress = longAddress;
            sPAllPropertiesByCurrencyResult.IdProperties = idProperties;
            sPAllPropertiesByCurrencyResult.YearBuilt = yearBuilt;
            sPAllPropertiesByCurrencyResult.Floor = floor;
            sPAllPropertiesByCurrencyResult.Area = area;
            sPAllPropertiesByCurrencyResult.Bedrooms = bedrooms;
            sPAllPropertiesByCurrencyResult.Bathrooms = bathrooms;
            sPAllPropertiesByCurrencyResult.Parking = parking;
            sPAllPropertiesByCurrencyResult.ParkingAvailable = parkingAvailable;
            sPAllPropertiesByCurrencyResult.InfoPropertie = infoPropertie;
            sPAllPropertiesByCurrencyResult.Price = price;
            sPAllPropertiesByCurrencyResult.PaymentMethod = paymentMethod;
            sPAllPropertiesByCurrencyResult.Currency = currency;
            sPAllPropertiesByCurrencyResult.BuildingType = buildingType;
            sPAllPropertiesByCurrencyResult.DisplayType = displayType;
            sPAllPropertiesByCurrencyResult.Furnishing = furnishing;
            sPAllPropertiesByCurrencyResult.PublichDate = publichDate;
            sPAllPropertiesByCurrencyResult.MapLink = mapLink;
            sPAllPropertiesByCurrencyResult.YoutubeVideoLink = youtubeVideoLink;
            sPAllPropertiesByCurrencyResult.Agent = agent;
            sPAllPropertiesByCurrencyResult.PhoneNumber = phoneNumber;
            sPAllPropertiesByCurrencyResult.WhatsappInk = whatsappInk;
            return sPAllPropertiesByCurrencyResult;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for PropertiesType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PropertiesType
        {
            get
            {
                string value = _PropertiesType;
                OnGetPropertiesType(ref value);
                return value;
            }
            set
            {
                if (_PropertiesType != value)
                {
                  OnPropertiesTypeChanging(ref value);
                  ReportPropertyChanging("PropertiesType");
                  _PropertiesType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PropertiesType");
                  OnPropertiesTypeChanged();
              }
            }
        }
        private string _PropertiesType;
        partial void OnGetPropertiesType(ref string value);
        partial void OnPropertiesTypeChanging(ref string value);
        partial void OnPropertiesTypeChanged();
    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// There are no comments for ImagePath in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ImagePath
        {
            get
            {
                string value = _ImagePath;
                OnGetImagePath(ref value);
                return value;
            }
            set
            {
                if (_ImagePath != value)
                {
                  OnImagePathChanging(ref value);
                  ReportPropertyChanging("ImagePath");
                  _ImagePath = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ImagePath");
                  OnImagePathChanged();
              }
            }
        }
        private string _ImagePath;
        partial void OnGetImagePath(ref string value);
        partial void OnImagePathChanging(ref string value);
        partial void OnImagePathChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// There are no comments for LongAddress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string LongAddress
        {
            get
            {
                string value = _LongAddress;
                OnGetLongAddress(ref value);
                return value;
            }
            set
            {
                if (_LongAddress != value)
                {
                  OnLongAddressChanging(ref value);
                  ReportPropertyChanging("LongAddress");
                  _LongAddress = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LongAddress");
                  OnLongAddressChanged();
              }
            }
        }
        private string _LongAddress;
        partial void OnGetLongAddress(ref string value);
        partial void OnLongAddressChanging(ref string value);
        partial void OnLongAddressChanged();
    
        /// <summary>
        /// There are no comments for IdProperties in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdProperties
        {
            get
            {
                int value = _IdProperties;
                OnGetIdProperties(ref value);
                return value;
            }
            set
            {
                if (_IdProperties != value)
                {
                  OnIdPropertiesChanging(ref value);
                  ReportPropertyChanging("IdProperties");
                  _IdProperties = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdProperties");
                  OnIdPropertiesChanged();
              }
            }
        }
        private int _IdProperties;
        partial void OnGetIdProperties(ref int value);
        partial void OnIdPropertiesChanging(ref int value);
        partial void OnIdPropertiesChanged();
    
        /// <summary>
        /// There are no comments for YearBuilt in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int YearBuilt
        {
            get
            {
                int value = _YearBuilt;
                OnGetYearBuilt(ref value);
                return value;
            }
            set
            {
                if (_YearBuilt != value)
                {
                  OnYearBuiltChanging(ref value);
                  ReportPropertyChanging("YearBuilt");
                  _YearBuilt = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("YearBuilt");
                  OnYearBuiltChanged();
              }
            }
        }
        private int _YearBuilt;
        partial void OnGetYearBuilt(ref int value);
        partial void OnYearBuiltChanging(ref int value);
        partial void OnYearBuiltChanged();
    
        /// <summary>
        /// There are no comments for Floor in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Floor
        {
            get
            {
                int value = _Floor;
                OnGetFloor(ref value);
                return value;
            }
            set
            {
                if (_Floor != value)
                {
                  OnFloorChanging(ref value);
                  ReportPropertyChanging("Floor");
                  _Floor = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Floor");
                  OnFloorChanged();
              }
            }
        }
        private int _Floor;
        partial void OnGetFloor(ref int value);
        partial void OnFloorChanging(ref int value);
        partial void OnFloorChanged();
    
        /// <summary>
        /// There are no comments for Area in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Area
        {
            get
            {
                int value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private int _Area;
        partial void OnGetArea(ref int value);
        partial void OnAreaChanging(ref int value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// There are no comments for Bedrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bedrooms
        {
            get
            {
                int value = _Bedrooms;
                OnGetBedrooms(ref value);
                return value;
            }
            set
            {
                if (_Bedrooms != value)
                {
                  OnBedroomsChanging(ref value);
                  ReportPropertyChanging("Bedrooms");
                  _Bedrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bedrooms");
                  OnBedroomsChanged();
              }
            }
        }
        private int _Bedrooms;
        partial void OnGetBedrooms(ref int value);
        partial void OnBedroomsChanging(ref int value);
        partial void OnBedroomsChanged();
    
        /// <summary>
        /// There are no comments for Bathrooms in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Bathrooms
        {
            get
            {
                int value = _Bathrooms;
                OnGetBathrooms(ref value);
                return value;
            }
            set
            {
                if (_Bathrooms != value)
                {
                  OnBathroomsChanging(ref value);
                  ReportPropertyChanging("Bathrooms");
                  _Bathrooms = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Bathrooms");
                  OnBathroomsChanged();
              }
            }
        }
        private int _Bathrooms;
        partial void OnGetBathrooms(ref int value);
        partial void OnBathroomsChanging(ref int value);
        partial void OnBathroomsChanged();
    
        /// <summary>
        /// There are no comments for Parking in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Parking
        {
            get
            {
                int value = _Parking;
                OnGetParking(ref value);
                return value;
            }
            set
            {
                if (_Parking != value)
                {
                  OnParkingChanging(ref value);
                  ReportPropertyChanging("Parking");
                  _Parking = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Parking");
                  OnParkingChanged();
              }
            }
        }
        private int _Parking;
        partial void OnGetParking(ref int value);
        partial void OnParkingChanging(ref int value);
        partial void OnParkingChanged();
    
        /// <summary>
        /// There are no comments for ParkingAvailable in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ParkingAvailable
        {
            get
            {
                string value = _ParkingAvailable;
                OnGetParkingAvailable(ref value);
                return value;
            }
            set
            {
                if (_ParkingAvailable != value)
                {
                  OnParkingAvailableChanging(ref value);
                  ReportPropertyChanging("ParkingAvailable");
                  _ParkingAvailable = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ParkingAvailable");
                  OnParkingAvailableChanged();
              }
            }
        }
        private string _ParkingAvailable;
        partial void OnGetParkingAvailable(ref string value);
        partial void OnParkingAvailableChanging(ref string value);
        partial void OnParkingAvailableChanged();
    
        /// <summary>
        /// There are no comments for InfoPropertie in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string InfoPropertie
        {
            get
            {
                string value = _InfoPropertie;
                OnGetInfoPropertie(ref value);
                return value;
            }
            set
            {
                if (_InfoPropertie != value)
                {
                  OnInfoPropertieChanging(ref value);
                  ReportPropertyChanging("InfoPropertie");
                  _InfoPropertie = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("InfoPropertie");
                  OnInfoPropertieChanged();
              }
            }
        }
        private string _InfoPropertie;
        partial void OnGetInfoPropertie(ref string value);
        partial void OnInfoPropertieChanging(ref string value);
        partial void OnInfoPropertieChanged();
    
        /// <summary>
        /// There are no comments for Images in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Images
        {
            get
            {
                string value = _Images;
                OnGetImages(ref value);
                return value;
            }
            set
            {
                if (_Images != value)
                {
                  OnImagesChanging(ref value);
                  ReportPropertyChanging("Images");
                  _Images = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Images");
                  OnImagesChanged();
              }
            }
        }
        private string _Images;
        partial void OnGetImages(ref string value);
        partial void OnImagesChanging(ref string value);
        partial void OnImagesChanged();
    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Price
        {
            get
            {
                decimal value = _Price;
                OnGetPrice(ref value);
                return value;
            }
            set
            {
                if (_Price != value)
                {
                  OnPriceChanging(ref value);
                  ReportPropertyChanging("Price");
                  _Price = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Price");
                  OnPriceChanged();
              }
            }
        }
        private decimal _Price;
        partial void OnGetPrice(ref decimal value);
        partial void OnPriceChanging(ref decimal value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// There are no comments for PaymentMethod in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PaymentMethod
        {
            get
            {
                string value = _PaymentMethod;
                OnGetPaymentMethod(ref value);
                return value;
            }
            set
            {
                if (_PaymentMethod != value)
                {
                  OnPaymentMethodChanging(ref value);
                  ReportPropertyChanging("PaymentMethod");
                  _PaymentMethod = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PaymentMethod");
                  OnPaymentMethodChanged();
              }
            }
        }
        private string _PaymentMethod;
        partial void OnGetPaymentMethod(ref string value);
        partial void OnPaymentMethodChanging(ref string value);
        partial void OnPaymentMethodChanged();
    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Currency
        {
            get
            {
                string value = _Currency;
                OnGetCurrency(ref value);
                return value;
            }
            set
            {
                if (_Currency != value)
                {
                  OnCurrencyChanging(ref value);
                  ReportPropertyChanging("Currency");
                  _Currency = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Currency");
                  OnCurrencyChanged();
              }
            }
        }
        private string _Currency;
        partial void OnGetCurrency(ref string value);
        partial void OnCurrencyChanging(ref string value);
        partial void OnCurrencyChanged();
    
        /// <summary>
        /// There are no comments for BuildingType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string BuildingType
        {
            get
            {
                string value = _BuildingType;
                OnGetBuildingType(ref value);
                return value;
            }
            set
            {
                if (_BuildingType != value)
                {
                  OnBuildingTypeChanging(ref value);
                  ReportPropertyChanging("BuildingType");
                  _BuildingType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("BuildingType");
                  OnBuildingTypeChanged();
              }
            }
        }
        private string _BuildingType;
        partial void OnGetBuildingType(ref string value);
        partial void OnBuildingTypeChanging(ref string value);
        partial void OnBuildingTypeChanged();
    
        /// <summary>
        /// There are no comments for DisplayType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DisplayType
        {
            get
            {
                string value = _DisplayType;
                OnGetDisplayType(ref value);
                return value;
            }
            set
            {
                if (_DisplayType != value)
                {
                  OnDisplayTypeChanging(ref value);
                  ReportPropertyChanging("DisplayType");
                  _DisplayType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DisplayType");
                  OnDisplayTypeChanged();
              }
            }
        }
        private string _DisplayType;
        partial void OnGetDisplayType(ref string value);
        partial void OnDisplayTypeChanging(ref string value);
        partial void OnDisplayTypeChanged();
    
        /// <summary>
        /// There are no comments for Furnishing in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Furnishing
        {
            get
            {
                string value = _Furnishing;
                OnGetFurnishing(ref value);
                return value;
            }
            set
            {
                if (_Furnishing != value)
                {
                  OnFurnishingChanging(ref value);
                  ReportPropertyChanging("Furnishing");
                  _Furnishing = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Furnishing");
                  OnFurnishingChanged();
              }
            }
        }
        private string _Furnishing;
        partial void OnGetFurnishing(ref string value);
        partial void OnFurnishingChanging(ref string value);
        partial void OnFurnishingChanged();
    
        /// <summary>
        /// There are no comments for PublichDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PublichDate
        {
            get
            {
                string value = _PublichDate;
                OnGetPublichDate(ref value);
                return value;
            }
            set
            {
                if (_PublichDate != value)
                {
                  OnPublichDateChanging(ref value);
                  ReportPropertyChanging("PublichDate");
                  _PublichDate = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PublichDate");
                  OnPublichDateChanged();
              }
            }
        }
        private string _PublichDate;
        partial void OnGetPublichDate(ref string value);
        partial void OnPublichDateChanging(ref string value);
        partial void OnPublichDateChanged();
    
        /// <summary>
        /// There are no comments for MapLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string MapLink
        {
            get
            {
                string value = _MapLink;
                OnGetMapLink(ref value);
                return value;
            }
            set
            {
                if (_MapLink != value)
                {
                  OnMapLinkChanging(ref value);
                  ReportPropertyChanging("MapLink");
                  _MapLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("MapLink");
                  OnMapLinkChanged();
              }
            }
        }
        private string _MapLink;
        partial void OnGetMapLink(ref string value);
        partial void OnMapLinkChanging(ref string value);
        partial void OnMapLinkChanged();
    
        /// <summary>
        /// There are no comments for YoutubeVideoLink in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string YoutubeVideoLink
        {
            get
            {
                string value = _YoutubeVideoLink;
                OnGetYoutubeVideoLink(ref value);
                return value;
            }
            set
            {
                if (_YoutubeVideoLink != value)
                {
                  OnYoutubeVideoLinkChanging(ref value);
                  ReportPropertyChanging("YoutubeVideoLink");
                  _YoutubeVideoLink = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("YoutubeVideoLink");
                  OnYoutubeVideoLinkChanged();
              }
            }
        }
        private string _YoutubeVideoLink;
        partial void OnGetYoutubeVideoLink(ref string value);
        partial void OnYoutubeVideoLinkChanging(ref string value);
        partial void OnYoutubeVideoLinkChanged();
    
        /// <summary>
        /// There are no comments for Agent in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Agent
        {
            get
            {
                string value = _Agent;
                OnGetAgent(ref value);
                return value;
            }
            set
            {
                if (_Agent != value)
                {
                  OnAgentChanging(ref value);
                  ReportPropertyChanging("Agent");
                  _Agent = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Agent");
                  OnAgentChanged();
              }
            }
        }
        private string _Agent;
        partial void OnGetAgent(ref string value);
        partial void OnAgentChanging(ref string value);
        partial void OnAgentChanged();
    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string PhoneNumber
        {
            get
            {
                string value = _PhoneNumber;
                OnGetPhoneNumber(ref value);
                return value;
            }
            set
            {
                if (_PhoneNumber != value)
                {
                  OnPhoneNumberChanging(ref value);
                  ReportPropertyChanging("PhoneNumber");
                  _PhoneNumber = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PhoneNumber");
                  OnPhoneNumberChanged();
              }
            }
        }
        private string _PhoneNumber;
        partial void OnGetPhoneNumber(ref string value);
        partial void OnPhoneNumberChanging(ref string value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// There are no comments for WhatsappInk in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string WhatsappInk
        {
            get
            {
                string value = _WhatsappInk;
                OnGetWhatsappInk(ref value);
                return value;
            }
            set
            {
                if (_WhatsappInk != value)
                {
                  OnWhatsappInkChanging(ref value);
                  ReportPropertyChanging("WhatsappInk");
                  _WhatsappInk = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("WhatsappInk");
                  OnWhatsappInkChanged();
              }
            }
        }
        private string _WhatsappInk;
        partial void OnGetWhatsappInk(ref string value);
        partial void OnWhatsappInkChanging(ref string value);
        partial void OnWhatsappInkChanged();

        #endregion
    }

}
